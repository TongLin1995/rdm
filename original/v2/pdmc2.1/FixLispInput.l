(defun caddddddr (L) (caddr (cddddr L)))
(defun cadddddr (L) (cadr (cddddr L)))
(defun caddddr (L) (car (cddddr L)))
(defun cdddddddr (L) (cdddr (cddddr L)))
(defun cddddddr (L) (cddr (cddddr L)))
(defun cdddddr (L) (cdr (cddddr L)))

(defun p () 
  (prog (Port Code)
		  (setq Port (open "isc.internal.in")) 
		  (setq Code (FixInput (read Port))) 
		  (close Port) 
		  (setq Port (open "isc.internal.out" :direction :output
                     :if-does-not-exist :create
                     :if-exists :supersede))
		  (pprint Code Port)
		  (close Port)
		  (exit)))

(defun FixInput (PDMcode) 
  (prog (F S) 
		  (setq F PDMcode S nil) 
		  loop 
		  (if (null F) (return (car S))) 
		  (case (car F) 
					(0 (rplaca S (list (car S)))) 
					(1 (rplaca S (list (car S) (cadr S))) (rplacd S (cddr S))) 
					(2 (rplaca S (list (car S) (caddr S) (cadr S))) (rplacd S (cdddr S))) 
					(3 (rplaca S (list (car S) (cadddr S) (caddr S) (cadr S))) (rplacd S (cddddr S))) 
					(4 (rplaca S (list (car S) (caddddr S) (cadddr S) (caddr S) (cadr S))) (rplacd S (cdddddr S))) 
					(5 (rplaca S (list (car S) (cadddddr S) (caddddr S) (cadddr S) (caddr S) (cadr S))) (rplacd S (cddddddr S))) 
					(6 (rplaca S (list (car S) (caddddddr S) (cadddddr S) (caddddr S) (cadddr S) (caddr S) (cadr S))) 
						(rplacd S (cdddddddr S))) 
					(t (setq S (cons (car F) S)))) 
		  (setq F (cdr F)) 
		  (go loop))) 

(p)
